parameters:
- name: workingDirectory
  type: string
  default: ''
- name: stateKey
  type: string
  default: ''
- name: varFile
  type: string
  default: ''

jobs:
- job: Deploy
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    TF_VAR_subscription_id: ''
    TF_VAR_tenant_id: ''
    TF_VAR_service_principal_id: ''
  steps:
  - task: AzureCLI@2
    displayName: 'Azure Login'
    inputs:
      azureSubscription: 'Azure Subscription'
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Show account info for debugging
        echo "Debug: Account info:"
        az account show
        
        # Get subscription ID
        echo "Debug: Getting subscription ID..."
        SUBSCRIPTION_ID=$(az account show --query id -o tsv)
        echo "Debug: Subscription ID: $SUBSCRIPTION_ID"
        echo "##vso[task.setvariable variable=TF_VAR_subscription_id]$SUBSCRIPTION_ID"
        
        # Get tenant ID
        echo "Debug: Getting tenant ID..."
        TENANT_ID=$(az account show --query tenantId -o tsv)
        echo "Debug: Tenant ID: $TENANT_ID"
        echo "##vso[task.setvariable variable=TF_VAR_tenant_id]$TENANT_ID"
        
        # Get service principal ID
        echo "Debug: Getting service principal ID..."
        SP_ID=$(az account show --query user.name -o tsv)
        echo "Debug: Service Principal ID: $SP_ID"
        echo "##vso[task.setvariable variable=TF_VAR_service_principal_id]$SP_ID"

  - task: TerraformInstaller@1
    displayName: 'Install Terraform'
    inputs:
      terraformVersion: 'latest'

  - task: TerraformTaskV4@4
    displayName: 'Terraform Init'
    inputs:
      provider: 'azurerm'
      command: 'init'
      workingDirectory: ${{ parameters.workingDirectory }}
      backendServiceArm: 'Azure Subscription'
      backendAzureRmResourceGroupName: 'wedding-api-capability-rg'
      backendAzureRmStorageAccountName: 'weddingapistate'
      backendAzureRmContainerName: 'tfstate'
      backendAzureRmKey: ${{ parameters.stateKey }}

  - task: Bash@3
    displayName: 'Import Resource Group'
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.workingDirectory }}
      script: |
        echo "Importing resource group..."
        /opt/hostedtoolcache/terraform/1.11.3/x64/terraform import \
          azurerm_resource_group.wedding_api_capability_rg /subscriptions/$(TF_VAR_subscription_id)/resourceGroups/wedding-api-capability-rg
    continueOnError: true

  - task: Bash@3
    displayName: 'Import Storage Account'
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.workingDirectory }}
      script: |
        echo "Importing storage account..."
        /opt/hostedtoolcache/terraform/1.11.3/x64/terraform import \
          azurerm_storage_account.terraform_state /subscriptions/$(TF_VAR_subscription_id)/resourceGroups/wedding-api-capability-rg/providers/Microsoft.Storage/storageAccounts/weddingapistate
    continueOnError: true

  - task: Bash@3
    displayName: 'Import Storage Container'
    inputs:
      targetType: 'inline'
      workingDirectory: ${{ parameters.workingDirectory }}
      script: |
        echo "Importing storage container..."
        /opt/hostedtoolcache/terraform/1.11.3/x64/terraform import \
          azurerm_storage_container.terraform_state https://weddingapistate.blob.core.windows.net/tfstate
    continueOnError: true

  - task: TerraformTaskV4@4
    displayName: 'Terraform Plan'
    inputs:
      provider: 'azurerm'
      command: 'plan'
      workingDirectory: ${{ parameters.workingDirectory }}
      environmentServiceNameAzureRM: 'Azure Subscription'
      commandOptions: ${{ parameters.varFile }}

  - task: TerraformTaskV4@4
    displayName: 'Terraform Apply'
    inputs:
      provider: 'azurerm'
      command: 'apply'
      workingDirectory: ${{ parameters.workingDirectory }}
      environmentServiceNameAzureRM: 'Azure Subscription'
      commandOptions: ${{ parameters.varFile }} 