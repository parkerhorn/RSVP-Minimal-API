trigger:
  branches:
    include:
    - main
  paths:
    include:
    - infrastructure/**

parameters:
  - name: workingDirectory
    type: string
    default: '$(System.DefaultWorkingDirectory)/infrastructure/capability'
  - name: backendServiceArm
    type: string
    default: 'Azure Subscription'
  - name: backendAzureRmResourceGroupName
    type: string
    default: 'wedding-api-capability-rg'
  - name: backendAzureRmStorageAccountName
    type: string
    default: 'weddingapistate'
  - name: backendAzureRmContainerName
    type: string
    default: 'tfstate'
  - name: backendAzureRmKey
    type: string
    default: 'terraform.tfstate'

variables:
  - name: TF_WORKSPACE
    value: 'default'
  - name: TF_VAR_location
    value: 'eastus'
  - name: TF_VAR_service_principal_id
    value: $(SERVICE_PRINCIPAL_ID)

stages:
- stage: Import
  displayName: 'Import Existing Resources'
  jobs:
  - job: Import
    displayName: 'Import'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: ${{ parameters.workingDirectory }}
        backendServiceArm: ${{ parameters.backendServiceArm }}
        backendAzureRmResourceGroupName: ${{ parameters.backendAzureRmResourceGroupName }}
        backendAzureRmStorageAccountName: ${{ parameters.backendAzureRmStorageAccountName }}
        backendAzureRmContainerName: ${{ parameters.backendAzureRmContainerName }}
        backendAzureRmKey: ${{ parameters.backendAzureRmKey }}

    - task: TerraformTaskV4@4
      displayName: 'Import Resource Group'
      inputs:
        provider: 'azurerm'
        command: 'custom'
        workingDirectory: ${{ parameters.workingDirectory }}
        environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}
        customCommand: 'import azurerm_resource_group.wedding_api_capability_rg /subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/wedding-api-capability-rg'

    - task: TerraformTaskV4@4
      displayName: 'Import Storage Account'
      inputs:
        provider: 'azurerm'
        command: 'custom'
        workingDirectory: ${{ parameters.workingDirectory }}
        environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}
        customCommand: 'import azurerm_storage_account.terraform_state /subscriptions/$(ARM_SUBSCRIPTION_ID)/resourceGroups/wedding-api-capability-rg/providers/Microsoft.Storage/storageAccounts/weddingapistate'

    - task: TerraformTaskV4@4
      displayName: 'Import Storage Container'
      inputs:
        provider: 'azurerm'
        command: 'custom'
        workingDirectory: ${{ parameters.workingDirectory }}
        environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}
        customCommand: 'import azurerm_storage_container.terraform_state https://weddingapistate.blob.core.windows.net/tfstate'

- stage: Plan
  displayName: 'Terraform Plan'
  dependsOn: Import
  jobs:
  - job: Plan
    displayName: 'Plan'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: ${{ parameters.workingDirectory }}
        backendServiceArm: ${{ parameters.backendServiceArm }}
        backendAzureRmResourceGroupName: ${{ parameters.backendAzureRmResourceGroupName }}
        backendAzureRmStorageAccountName: ${{ parameters.backendAzureRmStorageAccountName }}
        backendAzureRmContainerName: ${{ parameters.backendAzureRmContainerName }}
        backendAzureRmKey: ${{ parameters.backendAzureRmKey }}

    - task: TerraformTaskV4@4
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: ${{ parameters.workingDirectory }}
        environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}
        commandOptions: '-var="service_principal_id=$(SERVICE_PRINCIPAL_ID)"'

- stage: Apply
  displayName: 'Terraform Apply'
  dependsOn: Plan
  condition: succeeded()
  jobs:
  - job: Apply
    displayName: 'Apply'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@1
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: ${{ parameters.workingDirectory }}
        backendServiceArm: ${{ parameters.backendServiceArm }}
        backendAzureRmResourceGroupName: ${{ parameters.backendAzureRmResourceGroupName }}
        backendAzureRmStorageAccountName: ${{ parameters.backendAzureRmStorageAccountName }}
        backendAzureRmContainerName: ${{ parameters.backendAzureRmContainerName }}
        backendAzureRmKey: ${{ parameters.backendAzureRmKey }}

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: ${{ parameters.workingDirectory }}
        environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}
        commandOptions: '-var="service_principal_id=$(SERVICE_PRINCIPAL_ID)"' 