trigger:
  branches:
    include:
      - main
  paths:
    include:
      - source/Migrations/**
      - source/WeddingApi.csproj
      - infrastructure/db-migrations.yml

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  projectPath: 'source/WeddingApi.csproj'
  solutionPath: 'source/WeddingApi.sln'
  efArtifactName: 'efmigrator'
  capabilityKeyVaultName: 'lennyandparkerweddingkv'
  dbConnStringSecretPrefix: 'WeddingApiDbConnString'

stages:
- stage: Build
  displayName: 'Build EF Migrator'
  jobs:
  - job: Build
    displayName: 'Build .NET Project and EF Tool'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x'

    - script: dotnet tool install --global dotnet-ef
      displayName: 'Install/Update dotnet-ef tool'

    - task: DotNetCoreCLI@2
      displayName: 'Restore NuGet packages'
      inputs:
        command: 'restore'
        projects: '$(solutionPath)'
        feedsToUse: 'select'

    - task: DotNetCoreCLI@2
      displayName: 'Build project'
      inputs:
        command: 'build'
        projects: '$(projectPath)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Publish EF Migrator'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: '$(projectPath)'
        arguments: '--configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)/$(efArtifactName)'
        zipAfterPublish: false

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact: $(efArtifactName)'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(efArtifactName)'
        ArtifactName: '$(efArtifactName)'
        publishLocation: 'Container'

- stage: Deploy_Dev_Migrations
  displayName: 'Deploy Dev DB Migrations'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployDev
    displayName: 'Apply Migrations to Dev DB'
    environment: 'dev'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '8.x'

          - script: dotnet tool install --global dotnet-ef
            displayName: 'Install/Update dotnet-ef tool on agent'

          - task: DownloadBuildArtifacts@1
            displayName: 'Download EF Migrator Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(efArtifactName)'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureKeyVault@2
            displayName: 'Get Full DB Connection String from Key Vault'
            inputs:
              azureSubscription: 'Azure Subscription'
              KeyVaultName: '$(capabilityKeyVaultName)'
              SecretsFilter: '$(dbConnStringSecretPrefix)-$(Environment.Name)'
              RunAsPreJob: false

          - script: |
              # The Key Vault task makes the secret available as a variable named after the secret itself.
              # For instance, if SecretsFilter resolves to "WeddingApiDbConnString-dev",
              # the value will be in a variable $(WeddingApiDbConnString-dev) or $(WeddingApiDbConnString.dev) 
              # ADO often replaces hyphens with dots or underscores in variable names from KV.
              # Let's construct the expected variable name carefully.
              EXPECTED_SECRET_VAR_NAME="$(dbConnStringSecretPrefix)-$(Environment.Name)"
              # Replace hyphens with underscores for common bash variable compatibility if needed, but test ADO's direct name first.
              # Or, ADO might make it $(WeddingApiDbConnString.dev) - check pipeline logs for available variables if issues persist.
              
              # Attempt to get the connection string using the direct name first
              FULL_CONN_STRING_FROM_KV="$($EXPECTED_SECRET_VAR_NAME)"
              
              # Fallback for common replacements if direct name fails (test this if needed)
              if [ -z "$FULL_CONN_STRING_FROM_KV" ]; then
                echo "Direct secret name retrieval failed, trying with underscores..."
                EXPECTED_SECRET_VAR_NAME_UNDERSCORES=$(echo $EXPECTED_SECRET_VAR_NAME | sed 's/-/_/g')
                FULL_CONN_STRING_FROM_KV="$($EXPECTED_SECRET_VAR_NAME_UNDERSCORES)"
              fi
              if [ -z "$FULL_CONN_STRING_FROM_KV" ]; then
                echo "Retrieval with underscores failed, trying with dots..."
                EXPECTED_SECRET_VAR_NAME_DOTS=$(echo $EXPECTED_SECRET_VAR_NAME | sed 's/-/./g')
                FULL_CONN_STRING_FROM_KV="$($EXPECTED_SECRET_VAR_NAME_DOTS)"
              fi

              if [ -z "$FULL_CONN_STRING_FROM_KV" ]; then
                echo "ERROR: Full connection string '$EXPECTED_SECRET_VAR_NAME' (or variants) was not retrieved from Key Vault or is empty."
                echo "Please check Key Vault, secret name, and pipeline permissions."
                exit 1
              fi
              
              echo "Applying migrations using fetched connection string..."

              TARGET_DIR="$(System.ArtifactsDirectory)/$(efArtifactName)/source"
              echo "Changing to directory: $TARGET_DIR"
              cd "$TARGET_DIR"

              echo "Listing files in current directory ($(pwd)) before attempting ef database update Norwegen :"
              ls -la
              dotnet ef database update --assembly WeddingApi.dll --startup-assembly WeddingApi.dll --connection "$FULL_CONN_STRING_FROM_KV" --verbose
            displayName: 'Apply EF Migrations to Dev'

- stage: Deploy_Prod_Migrations
  displayName: 'Deploy Prod DB Migrations'
  dependsOn: Deploy_Dev_Migrations
  condition: succeeded()
  jobs:
  - deployment: DeployProd
    displayName: 'Apply Migrations to Prod DB'
    environment: 'prod' # This should match your ADO Environment name
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UseDotNet@2
            displayName: 'Use .NET SDK'
            inputs:
              packageType: 'sdk'
              version: '8.x'

          - script: dotnet tool install --global dotnet-ef
            displayName: 'Install/Update dotnet-ef tool on agent'

          - task: DownloadBuildArtifacts@1
            displayName: 'Download EF Migrator Artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(efArtifactName)'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureKeyVault@2
            displayName: 'Get Full DB Connection String from Key Vault'
            inputs:
              azureSubscription: 'Azure Subscription' # Ensure this is your correct ADO Service Connection name
              KeyVaultName: '$(capabilityKeyVaultName)'
              SecretsFilter: '$(dbConnStringSecretPrefix)-$(Environment.Name)' # e.g., WeddingApiDbConnString-prod
              RunAsPreJob: false

          - script: |
              EXPECTED_SECRET_VAR_NAME="$(dbConnStringSecretPrefix)-$(Environment.Name)"
              FULL_CONN_STRING_FROM_KV="$($EXPECTED_SECRET_VAR_NAME)"
              
              if [ -z "$FULL_CONN_STRING_FROM_KV" ]; then
                echo "Direct secret name retrieval failed, trying with underscores..."
                EXPECTED_SECRET_VAR_NAME_UNDERSCORES=$(echo $EXPECTED_SECRET_VAR_NAME | sed 's/-/_/g')
                FULL_CONN_STRING_FROM_KV="$($EXPECTED_SECRET_VAR_NAME_UNDERSCORES)"
              fi
              if [ -z "$FULL_CONN_STRING_FROM_KV" ]; then
                echo "Retrieval with underscores failed, trying with dots..."
                EXPECTED_SECRET_VAR_NAME_DOTS=$(echo $EXPECTED_SECRET_VAR_NAME | sed 's/-/./g')
                FULL_CONN_STRING_FROM_KV="$($EXPECTED_SECRET_VAR_NAME_DOTS)"
              fi

              if [ -z "$FULL_CONN_STRING_FROM_KV" ]; then
                echo "ERROR: Full connection string '$EXPECTED_SECRET_VAR_NAME' (or variants) was not retrieved from Key Vault or is empty."
                exit 1
              fi
              
              echo "Applying migrations using fetched connection string..."

              TARGET_DIR="$(System.ArtifactsDirectory)/$(efArtifactName)/source"
              echo "Changing to directory: $TARGET_DIR"
              cd "$TARGET_DIR"

              echo "Listing files in current directory ($(pwd)) before attempting ef database update:"
              ls -la
              dotnet ef database update --assembly WeddingApi.dll --startup-assembly WeddingApi.dll --connection "$FULL_CONN_STRING_FROM_KV" --verbose
            displayName: 'Apply EF Migrations to Prod' 